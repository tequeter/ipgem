#!/bin/bash

set -e -u
shopt -s nullglob
shopt -u failglob

. /etc/ipgem-gateway/networking

myname="$( basename "$0" )"
hosts=/etc/ipgem-gateway/hosts
declare -a ifmac=()        # MAC addresses of all IP gateway interfaces
declare -a modified=()     # Modified config files for dry_run
declare -a previous_cfg=() # Existing config files (will be deleted/replaced)
ifcfg=/etc/sysconfig/network-scripts
new=ipgnew
dry_run=false

# Argument handling
case "${1:-}" in
	"")         ;;
	--dry-run) dry_run=true ;;
	*)         echo "Usage: $myname [--dry-run]" 2>&1; exit 1 ;;
esac

# Cleanup if this script failed earlier
rm -f "$ifcfg"/*."$new"

# Fill in ifmac[] and previous_cfg[]
for i in "${!IFNAME[@]}"; do
	eth="${IFNAME[$i]}"
	ifmac[$i]="$( ip addr show dev $eth |grep ether |awk '{print $2}' )"
	if [ "$eth" != "$IFNAME_MGMT" ]; then
		existing_cfg+=("$ifcfg/ifcfg-$eth")
	fi
	existing_cfg+=("$ifcfg/ifcfg-$eth:"*)
done
modified+=("${existing_cfg[@]}")

# For each configured host (in $hosts) to relay
while read name oldip newip; do
	# Figure out which eth to use for this host
	ifidx=
	for i in "${!IFNAME[@]}"; do
		if echo $oldip |grep -qE "${IFNET_RE[$i]}"; then
			ifidx=$i
			break
		fi
	done
	if [ -z "$ifidx" ]; then
		echo "Don't know which network interface to use for $oldip" >&2
		exit 1
	fi

	# Determine if we're defining the parent or sub interface
	ifcfg_parent="$ifcfg/ifcfg-${IFNAME[$ifidx]}"
	if [[ "${IFNAME[$ifidx]}" != "$IFNAME_MGMT" && ! -e "$ifcfg_parent.$new" ]]; then
		# First host for this network (and not management interface), write the parent config
		cat >"$ifcfg_parent.$new" <<EOF
# Generated by $myname, proxy for $name
DEVICE=${IFNAME[$ifidx]}
BOOTPROTO=static
DHCPCLASS=
HWADDR=${ifmac[$ifidx]}
IPADDR=$oldip
PREFIX=${IFPREFIX[$ifidx]}
ONBOOT=yes
NM_CONTROLLED=no
ARPCHECK=no
EOF
		modified+=("$ifcfg_parent")
	else
		# Find a free subinterface
		subif=
		for (( i = 0; i < 1000; i++ )); do
			if [ ! -e "$ifcfg_parent:$i.$new" ]; then
				subif=":$i"
				break
			fi
		done
		if [ -z "$subif" ]; then
			echo "Couldn't find a free subinterface of ${IFNAME[$ifidx]}" >&2
			exit 1
		fi

		# Configure it
		cat >"$ifcfg_parent$subif.$new" <<EOF
# Generated by $myname, proxy for $name
DEVICE=${IFNAME[$ifidx]}$subif
BOOTPROTO=static
ONPARENT=yes
IPADDR=$oldip
PREFIX=${IFPREFIX[$ifidx]}
NM_CONTROLLED=no
ARPCHECK=no
EOF
		modified+=("$ifcfg_parent$subif")
	fi
done < <( grep -v '^#' "$hosts" |grep '[0-9]' )

# Declare a routing table that forces output through the management interface
# Create the table
modified+=("/etc/iproute2/rt_tables")
sed -e '/ipgem/d' "/etc/iproute2/rt_tables" >"/etc/iproute2/rt_tables.$new"
echo "$TABLE_VIA_MGMT_NUM $TABLE_VIA_MGMT_NAME" >>"/etc/iproute2/rt_tables.$new"
# Copy the routes relevant to this interface (default route, local subnet) to our custom table
default_gw="$( ip -4 route show to 0/0 dev $IFNAME_MGMT |head -n 1 |awk '{ print $3 }' )"
if [ -z "$default_gw" ]; then
	echo "The management interface $IFNAME_MGMT does not have the default route, check your configuration" >&2
	exit 1
fi
modified+=("$ifcfg/route-$IFNAME_MGMT")
test -e "$ifcfg/route-$IFNAME_MGMT" && cp "$ifcfg/route-$IFNAME_MGMT" "$ifcfg/route-$IFNAME_MGMT.$new"
touch "$ifcfg/route-$IFNAME_MGMT.$new"
sed -i -e '/ipgem/,$d' "$ifcfg/route-$IFNAME_MGMT.$new"
echo "# ipgem starts here - do not modify below this line" >>"$ifcfg/route-$IFNAME_MGMT.$new"
ip -4 route show dev "$IFNAME_MGMT" \
	| sed -e 's/proto \+kernel//g' -e "s/^/table $TABLE_VIA_MGMT_NAME dev $IFNAME_MGMT /" \
	>>"$ifcfg/route-$IFNAME_MGMT.$new"
# Create a routing rule that uses the custom table for packets marked by iptables
modified+=("$ifcfg/rule-$IFNAME_MGMT")
test -e "$ifcfg/rule-$IFNAME_MGMT" && cp "$ifcfg/rule-$IFNAME_MGMT" "$ifcfg/rule-$IFNAME_MGMT.$new"
touch "$ifcfg/rule-$IFNAME_MGMT.$new"
sed -i -e "/$MARK_VIA_MGMT/d" "$ifcfg/rule-$IFNAME_MGMT.$new"
echo "fwmark $MARK_VIA_MGMT table $TABLE_VIA_MGMT_NUM" >>"$ifcfg/rule-$IFNAME_MGMT.$new"

# Remove duplicates and sort $modified
readarray -t modified < <( printf "%s\n" "${modified[@]}" | sort -u )

if $dry_run; then
	echo "Would perform the following changes:"

	any_change=false
	for f in "${modified[@]}"; do
		set +e
		diff -Nu "$f" "$f.$new"
		differr=$?
		set -e
		case "$differr" in
			0) ;;
			1) any_change=true ;;
			*) echo "diff failed, see error above" >&2; exit 1 ;;
		esac

		rm -f "$f.$new"
	done

	if ! $any_change; then
		echo "Nothing."
	fi

	exit 0
fi

# Cleanup old config files (which may not exist in $modified)
rm -f "${existing_cfg[@]}"
# Replace the config files with the $new ones
for f in "${modified[@]}"; do
	if [ -e "$f.$new" ]; then
		mv -f "$f.$new" "$f"
	fi
done
